{"version":3,"file":"sdk.js","sources":["../../src/sdk.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport { NostrService } from './nostr-service';\r\nimport type {\r\n  AngorProject,\r\n  AngorProjectDetails,\r\n  AngorProjectStats,\r\n  AngorInvestment,\r\n  CacheEntry,\r\n  RequestConfig,\r\n  IndexerHealth\r\n} from './interfaces';\r\n\r\ninterface Indexer {\r\n  url: string;\r\n  isPrimary: boolean;\r\n  priority: number;\r\n}\r\n\r\ninterface SDKConfig {\r\n  timeout?: number;\r\n  useRemoteConfig?: boolean;\r\n  customIndexerUrl?: string;\r\n  enableNostr?: boolean;\r\n  nostrRelays?: string[];\r\n  enableCache?: boolean;\r\n  cacheTtl?: number;\r\n  maxRetries?: number;\r\n  retryDelay?: number;\r\n  healthCheckInterval?: number;\r\n  enableCompression?: boolean;\r\n  concurrentRequests?: number;\r\n}\r\n\r\nexport class AngorHubSDK {\r\n  private network: 'mainnet' | 'testnet';\r\n  private config: Required<SDKConfig>;\r\n  private indexers: Indexer[] = [];\r\n  private healthyIndexers: Indexer[] = [];\r\n  private nostrService?: NostrService;\r\n  private cache = new Map<string, CacheEntry<any>>();\r\n  private pendingRequests = new Map<string, Promise<any>>();\r\n  private healthStatus = new Map<string, IndexerHealth>();\r\n  private healthCheckTimer?: NodeJS.Timeout;\r\n  private axiosInstances = new Map<string, AxiosInstance>();\r\n  private requestQueue: Array<() => Promise<any>> = [];\r\n  private activeRequests = 0;\r\n\r\n  private networks = {\r\n    mainnet: [\r\n      { url: 'https://fulcrum.angor.online/', isPrimary: true, priority: 1 },\r\n      { url: 'https://electrs.angor.online/', isPrimary: false, priority: 2 },\r\n    ],\r\n    testnet: [\r\n      { url: 'https://signet.angor.online/', isPrimary: true, priority: 1 }\r\n    ]\r\n  };\r\n\r\n  constructor(network: 'mainnet' | 'testnet' = 'mainnet', config: SDKConfig = {}) {\r\n    this.network = network;\r\n    \r\n    const defaultRelays = this.getDefaultNostrRelays(network);\r\n    \r\n    this.config = {\r\n      timeout: config.timeout || 8000,\r\n      useRemoteConfig: config.useRemoteConfig !== false,\r\n      customIndexerUrl: config.customIndexerUrl || '',\r\n      enableNostr: config.enableNostr !== false,\r\n      nostrRelays: config.nostrRelays?.length ? config.nostrRelays : defaultRelays,\r\n      enableCache: config.enableCache !== false,\r\n      cacheTtl: config.cacheTtl || 300_000,\r\n      maxRetries: config.maxRetries || 3,\r\n      retryDelay: config.retryDelay || 1000,\r\n      healthCheckInterval: config.healthCheckInterval || 60_000,\r\n      enableCompression: config.enableCompression !== false,\r\n      concurrentRequests: config.concurrentRequests || 10\r\n    };\r\n\r\n    this.initializeIndexers();\r\n    this.initializeNostrService();\r\n    this.startHealthChecks();\r\n  }\r\n\r\n  private getDefaultNostrRelays(network: 'mainnet' | 'testnet'): string[] {\r\n    if (network === 'testnet') {\r\n      return [\r\n        \"wss://relay.damus.io\",\r\n        \"wss://relay.angor.io\",\r\n        \"wss://nostr-relay.wlvs.space\",\r\n        \"wss://relay.nostr.info\",\r\n        \"wss://nos.lol\",\r\n        \"wss://relay.current.fyi\",\r\n        \"wss://nostr.wine\",\r\n        \"wss://relay.orangepill.dev\"\r\n      ];\r\n    }\r\n    \r\n    return [\r\n      \"wss://relay.damus.io\",\r\n      \"wss://relay.angor.io\"\r\n    ];\r\n  }\r\n\r\n  private initializeIndexers(): void {\r\n    if (this.config.customIndexerUrl) {\r\n      this.indexers = [{ url: this.config.customIndexerUrl, isPrimary: true, priority: 1 }];\r\n    } else {\r\n      this.indexers = [...this.networks[this.network]];\r\n    }\r\n\r\n    this.healthyIndexers = [...this.indexers];\r\n    this.initializeAxiosInstances();\r\n  }\r\n\r\n  private initializeAxiosInstances(): void {\r\n    this.indexers.forEach(indexer => {\r\n      const axiosConfig: AxiosRequestConfig = {\r\n        baseURL: `${indexer.url}api/query/Angor/`,\r\n        timeout: this.config.timeout,\r\n        maxRedirects: 3,\r\n        validateStatus: (status) => status < 500,\r\n      };\r\n\r\n      if (typeof window !== 'undefined') {\r\n        axiosConfig.headers = {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        };\r\n      } else {\r\n        axiosConfig.headers = {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        };\r\n        \r\n        if (this.config.enableCompression) {\r\n          axiosConfig.headers['Accept-Encoding'] = 'gzip, deflate, br';\r\n        }\r\n      }\r\n\r\n      this.axiosInstances.set(indexer.url, axios.create(axiosConfig));\r\n    });\r\n  }\r\n\r\n  private initializeNostrService(): void {\r\n    if (this.config.enableNostr) {\r\n      this.nostrService = new NostrService(this.config.nostrRelays);\r\n    }\r\n  }\r\n\r\n  private getCacheKey(endpoint: string, params: Record<string, any> = {}): string {\r\n    const sortedParams = Object.keys(params).sort().reduce((result, key) => {\r\n      result[key] = params[key];\r\n      return result;\r\n    }, {} as Record<string, any>);\r\n    \r\n    return `${this.network}:${endpoint}:${JSON.stringify(sortedParams)}`;\r\n  }\r\n\r\n  private getFromCache<T>(key: string): T | null {\r\n    if (!this.config.enableCache) return null;\r\n\r\n    const entry = this.cache.get(key);\r\n    if (!entry) return null;\r\n\r\n    if (Date.now() > entry.timestamp + entry.ttl) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n\r\n    return entry.data;\r\n  }\r\n\r\n  private setCache<T>(key: string, data: T, ttl = this.config.cacheTtl): void {\r\n    if (!this.config.enableCache) return;\r\n\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl\r\n    });\r\n  }\r\n\r\n  private async checkIndexerHealth(indexer: Indexer): Promise<IndexerHealth> {\r\n    const startTime = Date.now();\r\n    const health: IndexerHealth = {\r\n      url: indexer.url,\r\n      isHealthy: false,\r\n      responseTime: 0,\r\n      lastCheck: Date.now(),\r\n      errorCount: this.healthStatus.get(indexer.url)?.errorCount || 0\r\n    };\r\n\r\n    try {\r\n      const axiosInstance = this.axiosInstances.get(indexer.url);\r\n      if (!axiosInstance) throw new Error('No axios instance');\r\n\r\n      const response = await axiosInstance.get('projects', {\r\n        params: { limit: 1 },\r\n        timeout: 5000\r\n      });\r\n\r\n      health.responseTime = Date.now() - startTime;\r\n      health.isHealthy = response.status === 200;\r\n      health.errorCount = 0;\r\n    } catch (error) {\r\n      health.responseTime = Date.now() - startTime;\r\n      health.isHealthy = false;\r\n      health.errorCount++;\r\n    }\r\n\r\n    this.healthStatus.set(indexer.url, health);\r\n    return health;\r\n  }\r\n\r\n  private async updateHealthyIndexers(): Promise<void> {\r\n    const healthChecks = await Promise.all(\r\n      this.indexers.map(indexer => this.checkIndexerHealth(indexer))\r\n    );\r\n\r\n    this.healthyIndexers = this.indexers\r\n      .filter(indexer => {\r\n        const health = this.healthStatus.get(indexer.url);\r\n        return health?.isHealthy && health.errorCount < 5;\r\n      })\r\n      .sort((a, b) => {\r\n        const healthA = this.healthStatus.get(a.url);\r\n        const healthB = this.healthStatus.get(b.url);\r\n        \r\n        if (a.priority !== b.priority) {\r\n          return a.priority - b.priority;\r\n        }\r\n        \r\n        return (healthA?.responseTime || Infinity) - (healthB?.responseTime || Infinity);\r\n      });\r\n\r\n    if (this.healthyIndexers.length === 0) {\r\n      this.healthyIndexers = [...this.indexers];\r\n    }\r\n  }\r\n\r\n  private startHealthChecks(): void {\r\n    this.updateHealthyIndexers();\r\n\r\n    this.healthCheckTimer = setInterval(() => {\r\n      this.updateHealthyIndexers();\r\n    }, this.config.healthCheckInterval);\r\n  }\r\n\r\n  private async throttleRequest<T>(requestFn: () => Promise<T>): Promise<T> {\r\n    if (this.activeRequests >= this.config.concurrentRequests) {\r\n      return new Promise((resolve, reject) => {\r\n        this.requestQueue.push(async () => {\r\n          try {\r\n            const result = await requestFn();\r\n            resolve(result);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    this.activeRequests++;\r\n    \r\n    try {\r\n      const result = await requestFn();\r\n      return result;\r\n    } finally {\r\n      this.activeRequests--;\r\n      \r\n      if (this.requestQueue.length > 0) {\r\n        const nextRequest = this.requestQueue.shift();\r\n        if (nextRequest) {\r\n          setImmediate(() => nextRequest());\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private async makeRequestWithRetry<T>(\r\n    endpoint: string, \r\n    params: Record<string, any> = {},\r\n    requestConfig: RequestConfig = {}\r\n  ): Promise<T> {\r\n    const config = {\r\n      timeout: this.config.timeout,\r\n      retries: this.config.maxRetries,\r\n      retryDelay: this.config.retryDelay,\r\n      useCache: this.config.enableCache,\r\n      cacheTtl: this.config.cacheTtl,\r\n      ...requestConfig\r\n    };\r\n\r\n    const cacheKey = this.getCacheKey(endpoint, params);\r\n\r\n    if (config.useCache) {\r\n      const cached = this.getFromCache<T>(cacheKey);\r\n      if (cached !== null) return cached;\r\n    }\r\n\r\n    if (this.pendingRequests.has(cacheKey)) {\r\n      return this.pendingRequests.get(cacheKey) as Promise<T>;\r\n    }\r\n\r\n    const requestPromise = this.throttleRequest(async () => {\r\n      let lastError: Error | null = null;\r\n\r\n      for (let attempt = 0; attempt <= config.retries; attempt++) {\r\n        const healthyIndexers = this.healthyIndexers.length > 0 ? this.healthyIndexers : this.indexers;\r\n        \r\n        for (const indexer of healthyIndexers) {\r\n          try {\r\n            const axiosInstance = this.axiosInstances.get(indexer.url);\r\n            if (!axiosInstance) continue;\r\n\r\n            const response: AxiosResponse<T> = await axiosInstance.get(endpoint, {\r\n              params,\r\n              timeout: config.timeout\r\n            });\r\n\r\n            if (config.useCache && response.status === 200) {\r\n              this.setCache(cacheKey, response.data, config.cacheTtl);\r\n            }\r\n\r\n            return response.data;\r\n          } catch (error: any) {\r\n            lastError = error;\r\n            \r\n            const health = this.healthStatus.get(indexer.url);\r\n            if (health) {\r\n              health.errorCount++;\r\n              health.isHealthy = false;\r\n            }\r\n\r\n            continue;\r\n          }\r\n        }\r\n\r\n        if (attempt < config.retries) {\r\n          await new Promise(resolve => setTimeout(resolve, config.retryDelay * (attempt + 1)));\r\n        }\r\n      }\r\n\r\n      throw lastError || new Error('All indexers failed');\r\n    });\r\n\r\n    this.pendingRequests.set(cacheKey, requestPromise);\r\n    \r\n    try {\r\n      const result = await requestPromise;\r\n      return result;\r\n    } finally {\r\n      this.pendingRequests.delete(cacheKey);\r\n    }\r\n  }\r\n\r\n  async getProjects(limit = 10, offset = 0, useCache = true): Promise<AngorProject[]> {\r\n    try {\r\n      const response = await this.makeRequestWithRetry<any>('projects', \r\n        { limit, offset }, \r\n        { useCache }\r\n      );\r\n      \r\n      let projects: AngorProject[];\r\n      if (Array.isArray(response)) {\r\n        projects = response;\r\n      } else if (response && Array.isArray(response.data)) {\r\n        projects = response.data;\r\n      } else if (response && Array.isArray(response.projects)) {\r\n        projects = response.projects;\r\n      } else {\r\n        throw new Error(`API returned unexpected format. Expected array of projects, got: ${typeof response}`);\r\n      }\r\n      \r\n      if (this.nostrService && projects.length > 0) {\r\n        return await this.nostrService.enrichProjectsWithNostrData(projects);\r\n      }\r\n      \r\n      return projects;\r\n    } catch (error: any) {\r\n      if (error.response?.status === 404) {\r\n        throw new Error(`Projects endpoint not found (404). This may indicate the ${this.network} indexer is not available or the API endpoint has changed.`);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getProject(projectId: string, useCache = true): Promise<AngorProjectDetails> {\r\n    const project = await this.makeRequestWithRetry<AngorProjectDetails>(\r\n      `projects/${projectId}`, \r\n      {}, \r\n      { useCache }\r\n    );\r\n    \r\n    if (this.nostrService) {\r\n      return await this.nostrService.enrichProjectWithNostrData(project);\r\n    }\r\n    \r\n    return project;\r\n  }\r\n\r\n  async getProjectStats(projectId: string, useCache = true): Promise<AngorProjectStats> {\r\n    return await this.makeRequestWithRetry<AngorProjectStats>(\r\n      `projects/${projectId}/stats`, \r\n      {}, \r\n      { useCache, cacheTtl: 60_000 }\r\n    );\r\n  }\r\n\r\n  async getProjectInvestments(\r\n    projectId: string, \r\n    limit = 10, \r\n    offset = 0, \r\n    useCache = true\r\n  ): Promise<AngorInvestment[]> {\r\n    return await this.makeRequestWithRetry<AngorInvestment[]>(\r\n      `projects/${projectId}/investments`, \r\n      { limit, offset }, \r\n      { useCache }\r\n    );\r\n  }\r\n\r\n  async getInvestorInvestment(\r\n    projectId: string, \r\n    investorPublicKey: string, \r\n    useCache = true\r\n  ): Promise<AngorInvestment> {\r\n    return await this.makeRequestWithRetry<AngorInvestment>(\r\n      `projects/${projectId}/investments/${investorPublicKey}`, \r\n      {}, \r\n      { useCache }\r\n    );\r\n  }\r\n\r\n  async getMultipleProjects(projectIds: string[], useCache = true): Promise<AngorProjectDetails[]> {\r\n    const requests = projectIds.map(id => this.getProject(id, useCache));\r\n    return await Promise.all(requests);\r\n  }\r\n\r\n  async getMultipleProjectStats(projectIds: string[], useCache = true): Promise<AngorProjectStats[]> {\r\n    const requests = projectIds.map(id => this.getProjectStats(id, useCache));\r\n    return await Promise.all(requests);\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.cache.clear();\r\n    if (this.nostrService) {\r\n      this.nostrService.clearCache();\r\n    }\r\n  }\r\n\r\n  getCacheStats(): { \r\n    sdkCache: { size: number; keys: string[] }; \r\n    nostrCache?: { size: number; keys: string[] } \r\n  } {\r\n    const stats = {\r\n      sdkCache: {\r\n        size: this.cache.size,\r\n        keys: Array.from(this.cache.keys())\r\n      }\r\n    };\r\n\r\n    if (this.nostrService) {\r\n      return {\r\n        ...stats,\r\n        nostrCache: this.nostrService.getCacheStats()\r\n      };\r\n    }\r\n\r\n    return stats;\r\n  }\r\n\r\n  getHealthStatus(): { indexers: IndexerHealth[]; healthyCount: number } {\r\n    return {\r\n      indexers: Array.from(this.healthStatus.values()),\r\n      healthyCount: this.healthyIndexers.length\r\n    };\r\n  }\r\n\r\n  getConfigInfo() {\r\n    return {\r\n      network: this.network,\r\n      config: this.config,\r\n      currentHealthyIndexers: this.healthyIndexers.length,\r\n      totalIndexers: this.indexers.length,\r\n      cacheSize: this.cache.size,\r\n      activeRequests: this.activeRequests,\r\n      queuedRequests: this.requestQueue.length,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  destroy(): void {\r\n    if (this.healthCheckTimer) {\r\n      clearInterval(this.healthCheckTimer);\r\n      this.healthCheckTimer = undefined;\r\n    }\r\n\r\n    this.clearCache();\r\n    this.pendingRequests.clear();\r\n    this.requestQueue.length = 0;\r\n\r\n    if (this.nostrService) {\r\n      this.nostrService.disconnect();\r\n    }\r\n\r\n    this.axiosInstances.clear();\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}