{"version":3,"file":"nostr-service.js","sources":["../../src/nostr-service.ts"],"sourcesContent":["import NDK, { NDKEvent, NDKFilter } from '@nostr-dev-kit/ndk';\r\nimport type { ProjectInfo, ProjectProfileMetadata, CacheEntry, BatchNostrRequest } from './interfaces';\r\n\r\nexport class NostrService {\r\n  private ndk: NDK;\r\n  private isInitialized: boolean = false;\r\n  private cache = new Map<string, CacheEntry<any>>();\r\n  private pendingRequests = new Map<string, Promise<any>>();\r\n  private batchQueue: BatchNostrRequest[] = [];\r\n  private batchTimeout: NodeJS.Timeout | null = null;\r\n  private readonly BATCH_DELAY = 50; // ms\r\n  private readonly BATCH_SIZE = 20;\r\n  private readonly DEFAULT_CACHE_TTL = 300_000; // 5 minutes\r\n\r\n  constructor(\r\n    relays: string[] = [\r\n      \"wss://relay.damus.io\",\r\n      \"wss://relay.primal.net\", \r\n      \"wss://nos.lol\",\r\n      \"wss://relay.angor.io\",\r\n      \"wss://relay2.angor.io\"\r\n    ]\r\n  ) {\r\n    try {\r\n      this.ndk = new NDK({\r\n        explicitRelayUrls: relays,\r\n        enableOutboxModel: false // Disable for better browser compatibility\r\n      });\r\n    } catch (error) {\r\n      console.warn('Failed to initialize NDK:', error);\r\n      // Create a minimal fallback NDK instance\r\n      this.ndk = new NDK({\r\n        explicitRelayUrls: relays.slice(0, 2) // Use only first 2 relays as fallback\r\n      });\r\n    }\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    if (this.isInitialized) return;\r\n    \r\n    try {\r\n      console.log('Initializing Nostr service...');\r\n      await this.ndk.connect();\r\n      this.isInitialized = true;\r\n      console.log('‚úÖ Nostr service initialized successfully');\r\n    } catch (error) {\r\n      console.error('Failed to initialize Nostr service:', error);\r\n      // Don't throw error, just log it - continue without Nostr\r\n      this.isInitialized = false;\r\n    }\r\n  }\r\n\r\n  private getCacheKey(type: 'project' | 'profile', id: string): string {\r\n    return `${type}:${id}`;\r\n  }\r\n\r\n  private getFromCache<T>(key: string): T | null {\r\n    const entry = this.cache.get(key);\r\n    if (!entry) return null;\r\n    \r\n    if (Date.now() > entry.timestamp + entry.ttl) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return entry.data;\r\n  }\r\n\r\n  private setCache<T>(key: string, data: T, ttl = this.DEFAULT_CACHE_TTL): void {\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl\r\n    });\r\n  }\r\n\r\n  private async deduplicateRequest<T>(key: string, requestFn: () => Promise<T>): Promise<T> {\r\n    if (this.pendingRequests.has(key)) {\r\n      return this.pendingRequests.get(key) as Promise<T>;\r\n    }\r\n\r\n    const promise = requestFn().finally(() => {\r\n      this.pendingRequests.delete(key);\r\n    });\r\n\r\n    this.pendingRequests.set(key, promise);\r\n    return promise;\r\n  }\r\n\r\n  async getProjectInfo(nostrEventId: string, useCache = true): Promise<ProjectInfo | null> {\r\n    const cacheKey = this.getCacheKey('project', nostrEventId);\r\n    \r\n    if (useCache) {\r\n      const cached = this.getFromCache<ProjectInfo>(cacheKey);\r\n      if (cached) {\r\n        console.log(`üì¶ Using cached project info for ${nostrEventId}`);\r\n        return cached;\r\n      }\r\n    }\r\n\r\n    return this.deduplicateRequest(cacheKey, async () => {\r\n      try {\r\n        console.log(`üîç Fetching project info for event ID: ${nostrEventId}`);\r\n        await this.initialize();\r\n\r\n        if (!this.isInitialized) {\r\n          console.log('‚ùå Nostr service not initialized, skipping project info fetch');\r\n          return null;\r\n        }\r\n\r\n        const filter: NDKFilter = {\r\n          ids: [nostrEventId],\r\n          kinds: [3030 as any, 30078 as any],\r\n          limit: 1\r\n        };\r\n\r\n        console.log('üì° Fetching from Nostr relays...');\r\n        const events = await this.ndk.fetchEvents(filter);\r\n        \r\n        if (events.size === 0) {\r\n          console.log(`‚ö†Ô∏è No project info found for event ID: ${nostrEventId}`);\r\n          this.setCache(cacheKey, null, 60_000); // Cache null for 1 minute\r\n          return null;\r\n        }\r\n\r\n        const event = Array.from(events)[0];\r\n        const projectInfo = JSON.parse(event.content) as ProjectInfo;\r\n        \r\n        console.log(`‚úÖ Found project info for ${nostrEventId}:`, projectInfo.targetAmount);\r\n        \r\n        if (useCache) {\r\n          this.setCache(cacheKey, projectInfo);\r\n        }\r\n        \r\n        return projectInfo;\r\n      } catch (error) {\r\n        console.error(`‚ùå Error fetching project info for ${nostrEventId}:`, error);\r\n        return null;\r\n      }\r\n    });\r\n  }\r\n\r\n  async getProfileMetadata(nostrPubKey: string, useCache = true): Promise<ProjectProfileMetadata | null> {\r\n    const cacheKey = this.getCacheKey('profile', nostrPubKey);\r\n    \r\n    if (useCache) {\r\n      const cached = this.getFromCache<ProjectProfileMetadata>(cacheKey);\r\n      if (cached) {\r\n        console.log(`üì¶ Using cached profile metadata for ${nostrPubKey}`);\r\n        return cached;\r\n      }\r\n    }\r\n\r\n    return this.deduplicateRequest(cacheKey, async () => {\r\n      try {\r\n        console.log(`üë§ Fetching profile metadata for pubkey: ${nostrPubKey}`);\r\n        await this.initialize();\r\n\r\n        if (!this.isInitialized) {\r\n          console.log('‚ùå Nostr service not initialized, skipping profile fetch');\r\n          return null;\r\n        }\r\n\r\n        const filter: NDKFilter = {\r\n          authors: [nostrPubKey],\r\n          kinds: [0],\r\n          limit: 1\r\n        };\r\n\r\n        console.log('üì° Fetching profile from Nostr relays...');\r\n        const events = await this.ndk.fetchEvents(filter);\r\n        \r\n        if (events.size === 0) {\r\n          console.log(`‚ö†Ô∏è No profile metadata found for pubkey: ${nostrPubKey}`);\r\n          this.setCache(cacheKey, null, 60_000); // Cache null for 1 minute\r\n          return null;\r\n        }\r\n\r\n        const event = Array.from(events)[0];\r\n        const metadata = JSON.parse(event.content) as ProjectProfileMetadata;\r\n        \r\n        console.log(`‚úÖ Found profile metadata for ${nostrPubKey}:`, metadata.name || 'No name');\r\n        \r\n        if (useCache) {\r\n          this.setCache(cacheKey, metadata);\r\n        }\r\n        \r\n        return metadata;\r\n      } catch (error) {\r\n        console.error(`‚ùå Error fetching profile metadata for ${nostrPubKey}:`, error);\r\n        return null;\r\n      }\r\n    });\r\n  }\r\n\r\n  private async processBatch(): Promise<void> {\r\n    if (this.batchQueue.length === 0) return;\r\n\r\n    const batch = this.batchQueue.splice(0, this.BATCH_SIZE);\r\n    const allEventIds = new Set<string>();\r\n    const allPubKeys = new Set<string>();\r\n\r\n    batch.forEach(req => {\r\n      req.eventIds.forEach(id => allEventIds.add(id));\r\n      req.pubKeys.forEach(key => allPubKeys.add(key));\r\n    });\r\n\r\n    try {\r\n      await this.initialize();\r\n\r\n      // Fetch all project info and profile data in parallel\r\n      const [projectEvents, profileEvents] = await Promise.all([\r\n        allEventIds.size > 0 ? this.ndk.fetchEvents({\r\n          ids: Array.from(allEventIds),\r\n          kinds: [3030 as any, 30078 as any]\r\n        }) : new Set(),\r\n        allPubKeys.size > 0 ? this.ndk.fetchEvents({\r\n          authors: Array.from(allPubKeys),\r\n          kinds: [0]\r\n        }) : new Set()\r\n      ]);\r\n\r\n      // Process results\r\n      const results = new Map<string, any>();\r\n\r\n      // Process project events\r\n      for (const event of projectEvents) {\r\n        try {\r\n          const ndkEvent = event as NDKEvent;\r\n          const projectInfo = JSON.parse(ndkEvent.content) as ProjectInfo;\r\n          results.set(`project:${ndkEvent.id}`, projectInfo);\r\n          this.setCache(this.getCacheKey('project', ndkEvent.id), projectInfo);\r\n        } catch (error) {\r\n          console.error('Failed to parse project info:', error);\r\n        }\r\n      }\r\n\r\n      // Process profile events\r\n      for (const event of profileEvents) {\r\n        try {\r\n          const ndkEvent = event as NDKEvent;\r\n          const metadata = JSON.parse(ndkEvent.content) as ProjectProfileMetadata;\r\n          results.set(`profile:${ndkEvent.pubkey}`, metadata);\r\n          this.setCache(this.getCacheKey('profile', ndkEvent.pubkey), metadata);\r\n        } catch (error) {\r\n          console.error('Failed to parse profile metadata:', error);\r\n        }\r\n      }\r\n\r\n      // Resolve all batch requests\r\n      batch.forEach(req => {\r\n        try {\r\n          req.resolver(results);\r\n        } catch (error) {\r\n          req.rejecter(error as Error);\r\n        }\r\n      });\r\n\r\n    } catch (error) {\r\n      batch.forEach(req => req.rejecter(error as Error));\r\n    }\r\n  }\r\n\r\n  private scheduleBatch(): void {\r\n    if (this.batchTimeout) return;\r\n\r\n    this.batchTimeout = setTimeout(() => {\r\n      this.batchTimeout = null;\r\n      this.processBatch();\r\n    }, this.BATCH_DELAY);\r\n  }\r\n\r\n  async enrichProjectWithNostrData(project: any): Promise<any> {\r\n    if (!project.nostrEventId) {\r\n      return project;\r\n    }\r\n\r\n    const projectInfo = await this.getProjectInfo(project.nostrEventId);\r\n    \r\n    let metadata: ProjectProfileMetadata | null = null;\r\n    if (projectInfo?.nostrPubKey) {\r\n      metadata = await this.getProfileMetadata(projectInfo.nostrPubKey);\r\n    }\r\n\r\n    return {\r\n      ...project,\r\n      projectInfo,\r\n      metadata\r\n    };\r\n  }\r\n\r\n  async enrichProjectsWithNostrData(projects: any[]): Promise<any[]> {\r\n    // Add safety check for projects parameter\r\n    if (!Array.isArray(projects)) {\r\n      console.warn('‚ö†Ô∏è enrichProjectsWithNostrData: projects is not an array:', typeof projects, projects);\r\n      return [];\r\n    }\r\n    \r\n    if (projects.length === 0) return projects;\r\n\r\n    console.log(`üåê Enriching ${projects.length} projects with Nostr data...`);\r\n\r\n    // Check if Nostr service is initialized\r\n    if (!this.isInitialized) {\r\n      console.log('Nostr service not initialized, attempting to initialize...');\r\n      await this.initialize();\r\n      if (!this.isInitialized) {\r\n        console.log('‚ö†Ô∏è Nostr service failed to initialize, returning projects without enrichment');\r\n        return projects;\r\n      }\r\n    }\r\n\r\n    // Collect all unique event IDs and pub keys\r\n    const eventIds = new Set<string>();\r\n    const pubKeys = new Set<string>();\r\n\r\n    projects.forEach(project => {\r\n      if (project.nostrEventId) {\r\n        eventIds.add(project.nostrEventId);\r\n      }\r\n    });\r\n\r\n    console.log(`Found ${eventIds.size} unique Nostr event IDs`);\r\n\r\n    // First, fetch all project info data\r\n    const projectInfoMap = new Map<string, ProjectInfo>();\r\n    if (eventIds.size > 0) {\r\n      console.log('Fetching project info from Nostr...');\r\n      await Promise.all(\r\n        Array.from(eventIds).map(async (eventId) => {\r\n          try {\r\n            const projectInfo = await this.getProjectInfo(eventId);\r\n            if (projectInfo) {\r\n              projectInfoMap.set(eventId, projectInfo);\r\n              if (projectInfo.nostrPubKey) {\r\n                pubKeys.add(projectInfo.nostrPubKey);\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.warn(`Failed to fetch project info for ${eventId}:`, error);\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    console.log(`Fetched ${projectInfoMap.size} project info records`);\r\n\r\n    // Then fetch all profile metadata\r\n    const metadataMap = new Map<string, ProjectProfileMetadata>();\r\n    if (pubKeys.size > 0) {\r\n      console.log('Fetching profile metadata from Nostr...');\r\n      await Promise.all(\r\n        Array.from(pubKeys).map(async (pubKey) => {\r\n          try {\r\n            const metadata = await this.getProfileMetadata(pubKey);\r\n            if (metadata) {\r\n              metadataMap.set(pubKey, metadata);\r\n            }\r\n          } catch (error) {\r\n            console.warn(`Failed to fetch metadata for ${pubKey}:`, error);\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    console.log(`Fetched ${metadataMap.size} profile metadata records`);\r\n\r\n    // Finally, enrich all projects\r\n    const enrichedProjects = projects.map(project => {\r\n      if (!project.nostrEventId) return project;\r\n\r\n      const projectInfo = projectInfoMap.get(project.nostrEventId);\r\n      const metadata = projectInfo?.nostrPubKey ? metadataMap.get(projectInfo.nostrPubKey) : null;\r\n\r\n      return {\r\n        ...project,\r\n        projectInfo,\r\n        metadata\r\n      };\r\n    });\r\n\r\n    const enrichedCount = enrichedProjects.filter(p => p.projectInfo || p.metadata).length;\r\n    console.log(`‚úÖ Enriched ${enrichedCount}/${projects.length} projects with Nostr data`);\r\n\r\n    return enrichedProjects;\r\n  }\r\n\r\n  clearCache(): void {\r\n    this.cache.clear();\r\n  }\r\n\r\n  getCacheStats(): { size: number; keys: string[] } {\r\n    return {\r\n      size: this.cache.size,\r\n      keys: Array.from(this.cache.keys())\r\n    };\r\n  }\r\n\r\n  disconnect(): void {\r\n    if (this.batchTimeout) {\r\n      clearTimeout(this.batchTimeout);\r\n      this.batchTimeout = null;\r\n    }\r\n    \r\n    this.clearCache();\r\n    this.pendingRequests.clear();\r\n    this.batchQueue.length = 0;\r\n    \r\n    if (this.isInitialized) {\r\n      this.isInitialized = false;\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}