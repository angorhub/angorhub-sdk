{"version":3,"file":"angorhub-sdk.bundle.js","sources":["../../src/sdk.ts"],"sourcesContent":["import axios from 'axios';\r\nimport type {\r\n  AngorProject,\r\n  AngorProjectDetails,\r\n  AngorProjectStats,\r\n  AngorInvestment\r\n} from './interfaces';\r\n\r\ninterface Indexer {\r\n  url: string;\r\n  isPrimary: boolean;\r\n}\r\n\r\ninterface SDKConfig {\r\n  timeout?: number;\r\n  useRemoteConfig?: boolean;\r\n  customIndexerUrl?: string;\r\n}\r\n\r\nexport class AngorHubSDK {\r\n  private network: 'mainnet' | 'testnet';\r\n  private config: SDKConfig;\r\n  private indexers: Indexer[];\r\n  private currentIndexer: Indexer;\r\n\r\n  private networks = {\r\n    mainnet: [\r\n      { url: 'https://fulcrum.angor.online/', isPrimary: true },\r\n      { url: 'https://indexer.angor.io/', isPrimary: false },\r\n      { url: 'https://electrs.angor.online/', isPrimary: false }\r\n    ],\r\n    testnet: [\r\n      { url: 'https://test.indexer.angor.io/', isPrimary: true },\r\n      { url: 'https://signet.angor.online/', isPrimary: false }\r\n    ]\r\n  };\r\n\r\n  constructor(network: 'mainnet' | 'testnet' = 'mainnet', config: SDKConfig = {}) {\r\n    this.network = network;\r\n    this.config = {\r\n      timeout: config.timeout || 8000,\r\n      useRemoteConfig: config.useRemoteConfig !== false,\r\n      customIndexerUrl: config.customIndexerUrl,\r\n    };\r\n\r\n    if (this.config.customIndexerUrl) {\r\n      this.indexers = [{ url: this.config.customIndexerUrl, isPrimary: true }];\r\n    } else {\r\n      this.indexers = this.networks[network];\r\n    }\r\n\r\n    this.currentIndexer = this.indexers.find(i => i.isPrimary) || this.indexers[0];\r\n  }\r\n\r\n  private async makeRequest<T>(endpoint: string, params: Record<string, any> = {}): Promise<T> {\r\n    for (const indexer of this.indexers) {\r\n      try {\r\n        const response = await axios.get<T>(`${indexer.url}api/query/Angor/${endpoint}`, {\r\n          params,\r\n          timeout: this.config.timeout\r\n        });\r\n        this.currentIndexer = indexer;\r\n        return response.data;\r\n      } catch (_) {}\r\n    }\r\n    throw new Error('All indexers failed');\r\n  }\r\n\r\n  async getProjects(limit = 10, offset = 0): Promise<AngorProject[]> {\r\n    return await this.makeRequest('projects', { limit, offset });\r\n  }\r\n\r\n  async getProject(projectId: string): Promise<AngorProjectDetails> {\r\n    return await this.makeRequest(`projects/${projectId}`);\r\n  }\r\n\r\n  async getProjectStats(projectId: string): Promise<AngorProjectStats> {\r\n    return await this.makeRequest(`projects/${projectId}/stats`);\r\n  }\r\n\r\n  async getProjectInvestments(projectId: string, limit = 10, offset = 0): Promise<AngorInvestment[]> {\r\n    return await this.makeRequest(`projects/${projectId}/investments`, { limit, offset });\r\n  }\r\n\r\n  async getInvestorInvestment(projectId: string, investorPublicKey: string): Promise<AngorInvestment> {\r\n    return await this.makeRequest(`projects/${projectId}/investments/${investorPublicKey}`);\r\n  }\r\n\r\n  getConfigInfo() {\r\n    return {\r\n      network: this.network,\r\n      currentIndexer: this.currentIndexer,\r\n      availableIndexers: this.indexers,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}